// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace tftp2 {
class ACK;
struct ACKDefaultTypeInternal;
extern ACKDefaultTypeInternal _ACK_default_instance_;
class DATA;
struct DATADefaultTypeInternal;
extern DATADefaultTypeInternal _DATA_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class FILE;
struct FILEDefaultTypeInternal;
extern FILEDefaultTypeInternal _FILE_default_instance_;
class ListItem;
struct ListItemDefaultTypeInternal;
extern ListItemDefaultTypeInternal _ListItem_default_instance_;
class ListResponse;
struct ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class MOVE;
struct MOVEDefaultTypeInternal;
extern MOVEDefaultTypeInternal _MOVE_default_instance_;
class Mensagem;
struct MensagemDefaultTypeInternal;
extern MensagemDefaultTypeInternal _Mensagem_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class REQ;
struct REQDefaultTypeInternal;
extern REQDefaultTypeInternal _REQ_default_instance_;
}  // namespace tftp2
PROTOBUF_NAMESPACE_OPEN
template<> ::tftp2::ACK* Arena::CreateMaybeMessage<::tftp2::ACK>(Arena*);
template<> ::tftp2::DATA* Arena::CreateMaybeMessage<::tftp2::DATA>(Arena*);
template<> ::tftp2::Error* Arena::CreateMaybeMessage<::tftp2::Error>(Arena*);
template<> ::tftp2::FILE* Arena::CreateMaybeMessage<::tftp2::FILE>(Arena*);
template<> ::tftp2::ListItem* Arena::CreateMaybeMessage<::tftp2::ListItem>(Arena*);
template<> ::tftp2::ListResponse* Arena::CreateMaybeMessage<::tftp2::ListResponse>(Arena*);
template<> ::tftp2::MOVE* Arena::CreateMaybeMessage<::tftp2::MOVE>(Arena*);
template<> ::tftp2::Mensagem* Arena::CreateMaybeMessage<::tftp2::Mensagem>(Arena*);
template<> ::tftp2::Path* Arena::CreateMaybeMessage<::tftp2::Path>(Arena*);
template<> ::tftp2::REQ* Arena::CreateMaybeMessage<::tftp2::REQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tftp2 {

enum Mode : int {
  netascii = 1,
  octet = 2,
  mail = 3
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = netascii;
constexpr Mode Mode_MAX = mail;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
enum ErrorCode : int {
  FileNotFound = 1,
  AccessViolation = 2,
  DiskFull = 3,
  IllegalOperation = 4,
  UnknownTid = 5,
  FileExists = 6,
  UnknownSession = 7,
  Undefined = 8
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = FileNotFound;
constexpr ErrorCode ErrorCode_MAX = Undefined;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.REQ) */ {
 public:
  inline REQ() : REQ(nullptr) {}
  ~REQ() override;
  explicit PROTOBUF_CONSTEXPR REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  REQ(const REQ& from);
  REQ(REQ&& from) noexcept
    : REQ() {
    *this = ::std::move(from);
  }

  inline REQ& operator=(const REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline REQ& operator=(REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const REQ* internal_default_instance() {
    return reinterpret_cast<const REQ*>(
               &_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(REQ& a, REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const REQ& from) {
    REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.REQ";
  }
  protected:
  explicit REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // required string fname = 1;
  bool has_fname() const;
  private:
  bool _internal_has_fname() const;
  public:
  void clear_fname();
  const std::string& fname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fname();
  PROTOBUF_NODISCARD std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // required .tftp2.Mode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::tftp2::Mode mode() const;
  void set_mode(::tftp2::Mode value);
  private:
  ::tftp2::Mode _internal_mode() const;
  void _internal_set_mode(::tftp2::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:tftp2.REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.DATA) */ {
 public:
  inline DATA() : DATA(nullptr) {}
  ~DATA() override;
  explicit PROTOBUF_CONSTEXPR DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DATA(const DATA& from);
  DATA(DATA&& from) noexcept
    : DATA() {
    *this = ::std::move(from);
  }

  inline DATA& operator=(const DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline DATA& operator=(DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const DATA* internal_default_instance() {
    return reinterpret_cast<const DATA*>(
               &_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DATA& a, DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(DATA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DATA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DATA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DATA& from) {
    DATA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.DATA";
  }
  protected:
  explicit DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kBlockNFieldNumber = 2,
  };
  // required bytes message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required uint32 block_n = 2;
  bool has_block_n() const;
  private:
  bool _internal_has_block_n() const;
  public:
  void clear_block_n();
  uint32_t block_n() const;
  void set_block_n(uint32_t value);
  private:
  uint32_t _internal_block_n() const;
  void _internal_set_block_n(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tftp2.DATA)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t block_n_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.ACK) */ {
 public:
  inline ACK() : ACK(nullptr) {}
  ~ACK() override;
  explicit PROTOBUF_CONSTEXPR ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ACK(const ACK& from);
  ACK(ACK&& from) noexcept
    : ACK() {
    *this = ::std::move(from);
  }

  inline ACK& operator=(const ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ACK& operator=(ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const ACK* internal_default_instance() {
    return reinterpret_cast<const ACK*>(
               &_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ACK& a, ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ACK& from) {
    ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.ACK";
  }
  protected:
  explicit ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNFieldNumber = 1,
  };
  // required uint32 block_n = 1;
  bool has_block_n() const;
  private:
  bool _internal_has_block_n() const;
  public:
  void clear_block_n();
  uint32_t block_n() const;
  void set_block_n(uint32_t value);
  private:
  uint32_t _internal_block_n() const;
  void _internal_set_block_n(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tftp2.ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t block_n_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit PROTOBUF_CONSTEXPR Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Error& from) {
    Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorcodeFieldNumber = 1,
  };
  // required .tftp2.ErrorCode errorcode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::tftp2::ErrorCode errorcode() const;
  void set_errorcode(::tftp2::ErrorCode value);
  private:
  ::tftp2::ErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::tftp2::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:tftp2.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int errorcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit PROTOBUF_CONSTEXPR Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Path& from) {
    Path::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:tftp2.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  ~ListResponse() override;
  explicit PROTOBUF_CONSTEXPR ListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListResponse& from) {
    ListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .tftp2.ListItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::tftp2::ListItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tftp2::ListItem >*
      mutable_items();
  private:
  const ::tftp2::ListItem& _internal_items(int index) const;
  ::tftp2::ListItem* _internal_add_items();
  public:
  const ::tftp2::ListItem& items(int index) const;
  ::tftp2::ListItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tftp2::ListItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:tftp2.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tftp2::ListItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ListItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.ListItem) */ {
 public:
  inline ListItem() : ListItem(nullptr) {}
  ~ListItem() override;
  explicit PROTOBUF_CONSTEXPR ListItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListItem(const ListItem& from);
  ListItem(ListItem&& from) noexcept
    : ListItem() {
    *this = ::std::move(from);
  }

  inline ListItem& operator=(const ListItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListItem& operator=(ListItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListItem& default_instance() {
    return *internal_default_instance();
  }
  enum AnswerCase {
    kFile = 1,
    kDir = 2,
    ANSWER_NOT_SET = 0,
  };

  static inline const ListItem* internal_default_instance() {
    return reinterpret_cast<const ListItem*>(
               &_ListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListItem& a, ListItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ListItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListItem& from) {
    ListItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.ListItem";
  }
  protected:
  explicit ListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kDirFieldNumber = 2,
  };
  // .tftp2.FILE file = 1;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::tftp2::FILE& file() const;
  PROTOBUF_NODISCARD ::tftp2::FILE* release_file();
  ::tftp2::FILE* mutable_file();
  void set_allocated_file(::tftp2::FILE* file);
  private:
  const ::tftp2::FILE& _internal_file() const;
  ::tftp2::FILE* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::tftp2::FILE* file);
  ::tftp2::FILE* unsafe_arena_release_file();

  // .tftp2.Path dir = 2;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  const ::tftp2::Path& dir() const;
  PROTOBUF_NODISCARD ::tftp2::Path* release_dir();
  ::tftp2::Path* mutable_dir();
  void set_allocated_dir(::tftp2::Path* dir);
  private:
  const ::tftp2::Path& _internal_dir() const;
  ::tftp2::Path* _internal_mutable_dir();
  public:
  void unsafe_arena_set_allocated_dir(
      ::tftp2::Path* dir);
  ::tftp2::Path* unsafe_arena_release_dir();

  void clear_answer();
  AnswerCase answer_case() const;
  // @@protoc_insertion_point(class_scope:tftp2.ListItem)
 private:
  class _Internal;
  void set_has_file();
  void set_has_dir();

  inline bool has_answer() const;
  inline void clear_has_answer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AnswerUnion {
      constexpr AnswerUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tftp2::FILE* file_;
      ::tftp2::Path* dir_;
    } answer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class FILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.FILE) */ {
 public:
  inline FILE() : FILE(nullptr) {}
  ~FILE() override;
  explicit PROTOBUF_CONSTEXPR FILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FILE(const FILE& from);
  FILE(FILE&& from) noexcept
    : FILE() {
    *this = ::std::move(from);
  }

  inline FILE& operator=(const FILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline FILE& operator=(FILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const FILE* internal_default_instance() {
    return reinterpret_cast<const FILE*>(
               &_FILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FILE& a, FILE& b) {
    a.Swap(&b);
  }
  inline void Swap(FILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FILE& from) {
    FILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.FILE";
  }
  protected:
  explicit FILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNomeFieldNumber = 1,
    kTamanhoFieldNumber = 2,
  };
  // required string nome = 1;
  bool has_nome() const;
  private:
  bool _internal_has_nome() const;
  public:
  void clear_nome();
  const std::string& nome() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nome(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nome();
  PROTOBUF_NODISCARD std::string* release_nome();
  void set_allocated_nome(std::string* nome);
  private:
  const std::string& _internal_nome() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nome(const std::string& value);
  std::string* _internal_mutable_nome();
  public:

  // required int32 tamanho = 2;
  bool has_tamanho() const;
  private:
  bool _internal_has_tamanho() const;
  public:
  void clear_tamanho();
  int32_t tamanho() const;
  void set_tamanho(int32_t value);
  private:
  int32_t _internal_tamanho() const;
  void _internal_set_tamanho(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tftp2.FILE)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_;
    int32_t tamanho_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.MOVE) */ {
 public:
  inline MOVE() : MOVE(nullptr) {}
  ~MOVE() override;
  explicit PROTOBUF_CONSTEXPR MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MOVE(const MOVE& from);
  MOVE(MOVE&& from) noexcept
    : MOVE() {
    *this = ::std::move(from);
  }

  inline MOVE& operator=(const MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MOVE& operator=(MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MOVE* internal_default_instance() {
    return reinterpret_cast<const MOVE*>(
               &_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MOVE& a, MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MOVE& from) {
    MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.MOVE";
  }
  protected:
  explicit MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNomeOrigFieldNumber = 1,
    kNomeNovoFieldNumber = 2,
  };
  // required string nome_orig = 1;
  bool has_nome_orig() const;
  private:
  bool _internal_has_nome_orig() const;
  public:
  void clear_nome_orig();
  const std::string& nome_orig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nome_orig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nome_orig();
  PROTOBUF_NODISCARD std::string* release_nome_orig();
  void set_allocated_nome_orig(std::string* nome_orig);
  private:
  const std::string& _internal_nome_orig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nome_orig(const std::string& value);
  std::string* _internal_mutable_nome_orig();
  public:

  // optional string nome_novo = 2;
  bool has_nome_novo() const;
  private:
  bool _internal_has_nome_novo() const;
  public:
  void clear_nome_novo();
  const std::string& nome_novo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nome_novo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nome_novo();
  PROTOBUF_NODISCARD std::string* release_nome_novo();
  void set_allocated_nome_novo(std::string* nome_novo);
  private:
  const std::string& _internal_nome_novo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nome_novo(const std::string& value);
  std::string* _internal_mutable_nome_novo();
  public:

  // @@protoc_insertion_point(class_scope:tftp2.MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_orig_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nome_novo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Mensagem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tftp2.Mensagem) */ {
 public:
  inline Mensagem() : Mensagem(nullptr) {}
  ~Mensagem() override;
  explicit PROTOBUF_CONSTEXPR Mensagem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mensagem(const Mensagem& from);
  Mensagem(Mensagem&& from) noexcept
    : Mensagem() {
    *this = ::std::move(from);
  }

  inline Mensagem& operator=(const Mensagem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mensagem& operator=(Mensagem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mensagem& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kRrq = 1,
    kWrq = 2,
    kData = 3,
    kAck = 4,
    kError = 5,
    kList = 6,
    kListResp = 7,
    kMkdir = 8,
    kMove = 9,
    MSG_NOT_SET = 0,
  };

  static inline const Mensagem* internal_default_instance() {
    return reinterpret_cast<const Mensagem*>(
               &_Mensagem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Mensagem& a, Mensagem& b) {
    a.Swap(&b);
  }
  inline void Swap(Mensagem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mensagem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mensagem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mensagem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mensagem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mensagem& from) {
    Mensagem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mensagem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tftp2.Mensagem";
  }
  protected:
  explicit Mensagem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRrqFieldNumber = 1,
    kWrqFieldNumber = 2,
    kDataFieldNumber = 3,
    kAckFieldNumber = 4,
    kErrorFieldNumber = 5,
    kListFieldNumber = 6,
    kListRespFieldNumber = 7,
    kMkdirFieldNumber = 8,
    kMoveFieldNumber = 9,
  };
  // .tftp2.REQ rrq = 1;
  bool has_rrq() const;
  private:
  bool _internal_has_rrq() const;
  public:
  void clear_rrq();
  const ::tftp2::REQ& rrq() const;
  PROTOBUF_NODISCARD ::tftp2::REQ* release_rrq();
  ::tftp2::REQ* mutable_rrq();
  void set_allocated_rrq(::tftp2::REQ* rrq);
  private:
  const ::tftp2::REQ& _internal_rrq() const;
  ::tftp2::REQ* _internal_mutable_rrq();
  public:
  void unsafe_arena_set_allocated_rrq(
      ::tftp2::REQ* rrq);
  ::tftp2::REQ* unsafe_arena_release_rrq();

  // .tftp2.REQ wrq = 2;
  bool has_wrq() const;
  private:
  bool _internal_has_wrq() const;
  public:
  void clear_wrq();
  const ::tftp2::REQ& wrq() const;
  PROTOBUF_NODISCARD ::tftp2::REQ* release_wrq();
  ::tftp2::REQ* mutable_wrq();
  void set_allocated_wrq(::tftp2::REQ* wrq);
  private:
  const ::tftp2::REQ& _internal_wrq() const;
  ::tftp2::REQ* _internal_mutable_wrq();
  public:
  void unsafe_arena_set_allocated_wrq(
      ::tftp2::REQ* wrq);
  ::tftp2::REQ* unsafe_arena_release_wrq();

  // .tftp2.DATA data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tftp2::DATA& data() const;
  PROTOBUF_NODISCARD ::tftp2::DATA* release_data();
  ::tftp2::DATA* mutable_data();
  void set_allocated_data(::tftp2::DATA* data);
  private:
  const ::tftp2::DATA& _internal_data() const;
  ::tftp2::DATA* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tftp2::DATA* data);
  ::tftp2::DATA* unsafe_arena_release_data();

  // .tftp2.ACK ack = 4;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  const ::tftp2::ACK& ack() const;
  PROTOBUF_NODISCARD ::tftp2::ACK* release_ack();
  ::tftp2::ACK* mutable_ack();
  void set_allocated_ack(::tftp2::ACK* ack);
  private:
  const ::tftp2::ACK& _internal_ack() const;
  ::tftp2::ACK* _internal_mutable_ack();
  public:
  void unsafe_arena_set_allocated_ack(
      ::tftp2::ACK* ack);
  ::tftp2::ACK* unsafe_arena_release_ack();

  // .tftp2.Error error = 5;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::tftp2::Error& error() const;
  PROTOBUF_NODISCARD ::tftp2::Error* release_error();
  ::tftp2::Error* mutable_error();
  void set_allocated_error(::tftp2::Error* error);
  private:
  const ::tftp2::Error& _internal_error() const;
  ::tftp2::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::tftp2::Error* error);
  ::tftp2::Error* unsafe_arena_release_error();

  // .tftp2.Path list = 6;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::tftp2::Path& list() const;
  PROTOBUF_NODISCARD ::tftp2::Path* release_list();
  ::tftp2::Path* mutable_list();
  void set_allocated_list(::tftp2::Path* list);
  private:
  const ::tftp2::Path& _internal_list() const;
  ::tftp2::Path* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::tftp2::Path* list);
  ::tftp2::Path* unsafe_arena_release_list();

  // .tftp2.ListResponse list_resp = 7;
  bool has_list_resp() const;
  private:
  bool _internal_has_list_resp() const;
  public:
  void clear_list_resp();
  const ::tftp2::ListResponse& list_resp() const;
  PROTOBUF_NODISCARD ::tftp2::ListResponse* release_list_resp();
  ::tftp2::ListResponse* mutable_list_resp();
  void set_allocated_list_resp(::tftp2::ListResponse* list_resp);
  private:
  const ::tftp2::ListResponse& _internal_list_resp() const;
  ::tftp2::ListResponse* _internal_mutable_list_resp();
  public:
  void unsafe_arena_set_allocated_list_resp(
      ::tftp2::ListResponse* list_resp);
  ::tftp2::ListResponse* unsafe_arena_release_list_resp();

  // .tftp2.Path mkdir = 8;
  bool has_mkdir() const;
  private:
  bool _internal_has_mkdir() const;
  public:
  void clear_mkdir();
  const ::tftp2::Path& mkdir() const;
  PROTOBUF_NODISCARD ::tftp2::Path* release_mkdir();
  ::tftp2::Path* mutable_mkdir();
  void set_allocated_mkdir(::tftp2::Path* mkdir);
  private:
  const ::tftp2::Path& _internal_mkdir() const;
  ::tftp2::Path* _internal_mutable_mkdir();
  public:
  void unsafe_arena_set_allocated_mkdir(
      ::tftp2::Path* mkdir);
  ::tftp2::Path* unsafe_arena_release_mkdir();

  // .tftp2.MOVE move = 9;
  bool has_move() const;
  private:
  bool _internal_has_move() const;
  public:
  void clear_move();
  const ::tftp2::MOVE& move() const;
  PROTOBUF_NODISCARD ::tftp2::MOVE* release_move();
  ::tftp2::MOVE* mutable_move();
  void set_allocated_move(::tftp2::MOVE* move);
  private:
  const ::tftp2::MOVE& _internal_move() const;
  ::tftp2::MOVE* _internal_mutable_move();
  public:
  void unsafe_arena_set_allocated_move(
      ::tftp2::MOVE* move);
  ::tftp2::MOVE* unsafe_arena_release_move();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:tftp2.Mensagem)
 private:
  class _Internal;
  void set_has_rrq();
  void set_has_wrq();
  void set_has_data();
  void set_has_ack();
  void set_has_error();
  void set_has_list();
  void set_has_list_resp();
  void set_has_mkdir();
  void set_has_move();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tftp2::REQ* rrq_;
      ::tftp2::REQ* wrq_;
      ::tftp2::DATA* data_;
      ::tftp2::ACK* ack_;
      ::tftp2::Error* error_;
      ::tftp2::Path* list_;
      ::tftp2::ListResponse* list_resp_;
      ::tftp2::Path* mkdir_;
      ::tftp2::MOVE* move_;
    } msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// REQ

// required string fname = 1;
inline bool REQ::_internal_has_fname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool REQ::has_fname() const {
  return _internal_has_fname();
}
inline void REQ::clear_fname() {
  _impl_.fname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& REQ::fname() const {
  // @@protoc_insertion_point(field_get:tftp2.REQ.fname)
  return _internal_fname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void REQ::set_fname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.fname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tftp2.REQ.fname)
}
inline std::string* REQ::mutable_fname() {
  std::string* _s = _internal_mutable_fname();
  // @@protoc_insertion_point(field_mutable:tftp2.REQ.fname)
  return _s;
}
inline const std::string& REQ::_internal_fname() const {
  return _impl_.fname_.Get();
}
inline void REQ::_internal_set_fname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fname_.Set(value, GetArenaForAllocation());
}
inline std::string* REQ::_internal_mutable_fname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.fname_.Mutable(GetArenaForAllocation());
}
inline std::string* REQ::release_fname() {
  // @@protoc_insertion_point(field_release:tftp2.REQ.fname)
  if (!_internal_has_fname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.fname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fname_.IsDefault()) {
    _impl_.fname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void REQ::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fname_.SetAllocated(fname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fname_.IsDefault()) {
    _impl_.fname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.REQ.fname)
}

// required .tftp2.Mode mode = 2;
inline bool REQ::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool REQ::has_mode() const {
  return _internal_has_mode();
}
inline void REQ::clear_mode() {
  _impl_.mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::tftp2::Mode REQ::_internal_mode() const {
  return static_cast< ::tftp2::Mode >(_impl_.mode_);
}
inline ::tftp2::Mode REQ::mode() const {
  // @@protoc_insertion_point(field_get:tftp2.REQ.mode)
  return _internal_mode();
}
inline void REQ::_internal_set_mode(::tftp2::Mode value) {
  assert(::tftp2::Mode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_ = value;
}
inline void REQ::set_mode(::tftp2::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:tftp2.REQ.mode)
}

// -------------------------------------------------------------------

// DATA

// required bytes message = 1;
inline bool DATA::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DATA::has_message() const {
  return _internal_has_message();
}
inline void DATA::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DATA::message() const {
  // @@protoc_insertion_point(field_get:tftp2.DATA.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DATA::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tftp2.DATA.message)
}
inline std::string* DATA::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tftp2.DATA.message)
  return _s;
}
inline const std::string& DATA::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DATA::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DATA::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* DATA::release_message() {
  // @@protoc_insertion_point(field_release:tftp2.DATA.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DATA::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.DATA.message)
}

// required uint32 block_n = 2;
inline bool DATA::_internal_has_block_n() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DATA::has_block_n() const {
  return _internal_has_block_n();
}
inline void DATA::clear_block_n() {
  _impl_.block_n_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DATA::_internal_block_n() const {
  return _impl_.block_n_;
}
inline uint32_t DATA::block_n() const {
  // @@protoc_insertion_point(field_get:tftp2.DATA.block_n)
  return _internal_block_n();
}
inline void DATA::_internal_set_block_n(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.block_n_ = value;
}
inline void DATA::set_block_n(uint32_t value) {
  _internal_set_block_n(value);
  // @@protoc_insertion_point(field_set:tftp2.DATA.block_n)
}

// -------------------------------------------------------------------

// ACK

// required uint32 block_n = 1;
inline bool ACK::_internal_has_block_n() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ACK::has_block_n() const {
  return _internal_has_block_n();
}
inline void ACK::clear_block_n() {
  _impl_.block_n_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ACK::_internal_block_n() const {
  return _impl_.block_n_;
}
inline uint32_t ACK::block_n() const {
  // @@protoc_insertion_point(field_get:tftp2.ACK.block_n)
  return _internal_block_n();
}
inline void ACK::_internal_set_block_n(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.block_n_ = value;
}
inline void ACK::set_block_n(uint32_t value) {
  _internal_set_block_n(value);
  // @@protoc_insertion_point(field_set:tftp2.ACK.block_n)
}

// -------------------------------------------------------------------

// Error

// required .tftp2.ErrorCode errorcode = 1;
inline bool Error::_internal_has_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Error::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void Error::clear_errorcode() {
  _impl_.errorcode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tftp2::ErrorCode Error::_internal_errorcode() const {
  return static_cast< ::tftp2::ErrorCode >(_impl_.errorcode_);
}
inline ::tftp2::ErrorCode Error::errorcode() const {
  // @@protoc_insertion_point(field_get:tftp2.Error.errorcode)
  return _internal_errorcode();
}
inline void Error::_internal_set_errorcode(::tftp2::ErrorCode value) {
  assert(::tftp2::ErrorCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorcode_ = value;
}
inline void Error::set_errorcode(::tftp2::ErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:tftp2.Error.errorcode)
}

// -------------------------------------------------------------------

// Path

// required string path = 1;
inline bool Path::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Path::has_path() const {
  return _internal_has_path();
}
inline void Path::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Path::path() const {
  // @@protoc_insertion_point(field_get:tftp2.Path.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Path::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tftp2.Path.path)
}
inline std::string* Path::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tftp2.Path.path)
  return _s;
}
inline const std::string& Path::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Path::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Path::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Path::release_path() {
  // @@protoc_insertion_point(field_release:tftp2.Path.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Path::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.Path.path)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .tftp2.ListItem items = 1;
inline int ListResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ListResponse::items_size() const {
  return _internal_items_size();
}
inline void ListResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::tftp2::ListItem* ListResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:tftp2.ListResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tftp2::ListItem >*
ListResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:tftp2.ListResponse.items)
  return &_impl_.items_;
}
inline const ::tftp2::ListItem& ListResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::tftp2::ListItem& ListResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:tftp2.ListResponse.items)
  return _internal_items(index);
}
inline ::tftp2::ListItem* ListResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::tftp2::ListItem* ListResponse::add_items() {
  ::tftp2::ListItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:tftp2.ListResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tftp2::ListItem >&
ListResponse::items() const {
  // @@protoc_insertion_point(field_list:tftp2.ListResponse.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// ListItem

// .tftp2.FILE file = 1;
inline bool ListItem::_internal_has_file() const {
  return answer_case() == kFile;
}
inline bool ListItem::has_file() const {
  return _internal_has_file();
}
inline void ListItem::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline void ListItem::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.answer_.file_;
    }
    clear_has_answer();
  }
}
inline ::tftp2::FILE* ListItem::release_file() {
  // @@protoc_insertion_point(field_release:tftp2.ListItem.file)
  if (_internal_has_file()) {
    clear_has_answer();
    ::tftp2::FILE* temp = _impl_.answer_.file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.answer_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::FILE& ListItem::_internal_file() const {
  return _internal_has_file()
      ? *_impl_.answer_.file_
      : reinterpret_cast< ::tftp2::FILE&>(::tftp2::_FILE_default_instance_);
}
inline const ::tftp2::FILE& ListItem::file() const {
  // @@protoc_insertion_point(field_get:tftp2.ListItem.file)
  return _internal_file();
}
inline ::tftp2::FILE* ListItem::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.ListItem.file)
  if (_internal_has_file()) {
    clear_has_answer();
    ::tftp2::FILE* temp = _impl_.answer_.file_;
    _impl_.answer_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListItem::unsafe_arena_set_allocated_file(::tftp2::FILE* file) {
  clear_answer();
  if (file) {
    set_has_file();
    _impl_.answer_.file_ = file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.ListItem.file)
}
inline ::tftp2::FILE* ListItem::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_answer();
    set_has_file();
    _impl_.answer_.file_ = CreateMaybeMessage< ::tftp2::FILE >(GetArenaForAllocation());
  }
  return _impl_.answer_.file_;
}
inline ::tftp2::FILE* ListItem::mutable_file() {
  ::tftp2::FILE* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:tftp2.ListItem.file)
  return _msg;
}

// .tftp2.Path dir = 2;
inline bool ListItem::_internal_has_dir() const {
  return answer_case() == kDir;
}
inline bool ListItem::has_dir() const {
  return _internal_has_dir();
}
inline void ListItem::set_has_dir() {
  _impl_._oneof_case_[0] = kDir;
}
inline void ListItem::clear_dir() {
  if (_internal_has_dir()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.answer_.dir_;
    }
    clear_has_answer();
  }
}
inline ::tftp2::Path* ListItem::release_dir() {
  // @@protoc_insertion_point(field_release:tftp2.ListItem.dir)
  if (_internal_has_dir()) {
    clear_has_answer();
    ::tftp2::Path* temp = _impl_.answer_.dir_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.answer_.dir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::Path& ListItem::_internal_dir() const {
  return _internal_has_dir()
      ? *_impl_.answer_.dir_
      : reinterpret_cast< ::tftp2::Path&>(::tftp2::_Path_default_instance_);
}
inline const ::tftp2::Path& ListItem::dir() const {
  // @@protoc_insertion_point(field_get:tftp2.ListItem.dir)
  return _internal_dir();
}
inline ::tftp2::Path* ListItem::unsafe_arena_release_dir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.ListItem.dir)
  if (_internal_has_dir()) {
    clear_has_answer();
    ::tftp2::Path* temp = _impl_.answer_.dir_;
    _impl_.answer_.dir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListItem::unsafe_arena_set_allocated_dir(::tftp2::Path* dir) {
  clear_answer();
  if (dir) {
    set_has_dir();
    _impl_.answer_.dir_ = dir;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.ListItem.dir)
}
inline ::tftp2::Path* ListItem::_internal_mutable_dir() {
  if (!_internal_has_dir()) {
    clear_answer();
    set_has_dir();
    _impl_.answer_.dir_ = CreateMaybeMessage< ::tftp2::Path >(GetArenaForAllocation());
  }
  return _impl_.answer_.dir_;
}
inline ::tftp2::Path* ListItem::mutable_dir() {
  ::tftp2::Path* _msg = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:tftp2.ListItem.dir)
  return _msg;
}

inline bool ListItem::has_answer() const {
  return answer_case() != ANSWER_NOT_SET;
}
inline void ListItem::clear_has_answer() {
  _impl_._oneof_case_[0] = ANSWER_NOT_SET;
}
inline ListItem::AnswerCase ListItem::answer_case() const {
  return ListItem::AnswerCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FILE

// required string nome = 1;
inline bool FILE::_internal_has_nome() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FILE::has_nome() const {
  return _internal_has_nome();
}
inline void FILE::clear_nome() {
  _impl_.nome_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FILE::nome() const {
  // @@protoc_insertion_point(field_get:tftp2.FILE.nome)
  return _internal_nome();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FILE::set_nome(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.nome_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tftp2.FILE.nome)
}
inline std::string* FILE::mutable_nome() {
  std::string* _s = _internal_mutable_nome();
  // @@protoc_insertion_point(field_mutable:tftp2.FILE.nome)
  return _s;
}
inline const std::string& FILE::_internal_nome() const {
  return _impl_.nome_.Get();
}
inline void FILE::_internal_set_nome(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nome_.Set(value, GetArenaForAllocation());
}
inline std::string* FILE::_internal_mutable_nome() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.nome_.Mutable(GetArenaForAllocation());
}
inline std::string* FILE::release_nome() {
  // @@protoc_insertion_point(field_release:tftp2.FILE.nome)
  if (!_internal_has_nome()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.nome_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_.IsDefault()) {
    _impl_.nome_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FILE::set_allocated_nome(std::string* nome) {
  if (nome != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nome_.SetAllocated(nome, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_.IsDefault()) {
    _impl_.nome_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.FILE.nome)
}

// required int32 tamanho = 2;
inline bool FILE::_internal_has_tamanho() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FILE::has_tamanho() const {
  return _internal_has_tamanho();
}
inline void FILE::clear_tamanho() {
  _impl_.tamanho_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FILE::_internal_tamanho() const {
  return _impl_.tamanho_;
}
inline int32_t FILE::tamanho() const {
  // @@protoc_insertion_point(field_get:tftp2.FILE.tamanho)
  return _internal_tamanho();
}
inline void FILE::_internal_set_tamanho(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tamanho_ = value;
}
inline void FILE::set_tamanho(int32_t value) {
  _internal_set_tamanho(value);
  // @@protoc_insertion_point(field_set:tftp2.FILE.tamanho)
}

// -------------------------------------------------------------------

// MOVE

// required string nome_orig = 1;
inline bool MOVE::_internal_has_nome_orig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MOVE::has_nome_orig() const {
  return _internal_has_nome_orig();
}
inline void MOVE::clear_nome_orig() {
  _impl_.nome_orig_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MOVE::nome_orig() const {
  // @@protoc_insertion_point(field_get:tftp2.MOVE.nome_orig)
  return _internal_nome_orig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MOVE::set_nome_orig(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.nome_orig_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tftp2.MOVE.nome_orig)
}
inline std::string* MOVE::mutable_nome_orig() {
  std::string* _s = _internal_mutable_nome_orig();
  // @@protoc_insertion_point(field_mutable:tftp2.MOVE.nome_orig)
  return _s;
}
inline const std::string& MOVE::_internal_nome_orig() const {
  return _impl_.nome_orig_.Get();
}
inline void MOVE::_internal_set_nome_orig(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nome_orig_.Set(value, GetArenaForAllocation());
}
inline std::string* MOVE::_internal_mutable_nome_orig() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.nome_orig_.Mutable(GetArenaForAllocation());
}
inline std::string* MOVE::release_nome_orig() {
  // @@protoc_insertion_point(field_release:tftp2.MOVE.nome_orig)
  if (!_internal_has_nome_orig()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.nome_orig_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_orig_.IsDefault()) {
    _impl_.nome_orig_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MOVE::set_allocated_nome_orig(std::string* nome_orig) {
  if (nome_orig != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nome_orig_.SetAllocated(nome_orig, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_orig_.IsDefault()) {
    _impl_.nome_orig_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.MOVE.nome_orig)
}

// optional string nome_novo = 2;
inline bool MOVE::_internal_has_nome_novo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MOVE::has_nome_novo() const {
  return _internal_has_nome_novo();
}
inline void MOVE::clear_nome_novo() {
  _impl_.nome_novo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MOVE::nome_novo() const {
  // @@protoc_insertion_point(field_get:tftp2.MOVE.nome_novo)
  return _internal_nome_novo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MOVE::set_nome_novo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.nome_novo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tftp2.MOVE.nome_novo)
}
inline std::string* MOVE::mutable_nome_novo() {
  std::string* _s = _internal_mutable_nome_novo();
  // @@protoc_insertion_point(field_mutable:tftp2.MOVE.nome_novo)
  return _s;
}
inline const std::string& MOVE::_internal_nome_novo() const {
  return _impl_.nome_novo_.Get();
}
inline void MOVE::_internal_set_nome_novo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nome_novo_.Set(value, GetArenaForAllocation());
}
inline std::string* MOVE::_internal_mutable_nome_novo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.nome_novo_.Mutable(GetArenaForAllocation());
}
inline std::string* MOVE::release_nome_novo() {
  // @@protoc_insertion_point(field_release:tftp2.MOVE.nome_novo)
  if (!_internal_has_nome_novo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.nome_novo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_novo_.IsDefault()) {
    _impl_.nome_novo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MOVE::set_allocated_nome_novo(std::string* nome_novo) {
  if (nome_novo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nome_novo_.SetAllocated(nome_novo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nome_novo_.IsDefault()) {
    _impl_.nome_novo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.MOVE.nome_novo)
}

// -------------------------------------------------------------------

// Mensagem

// .tftp2.REQ rrq = 1;
inline bool Mensagem::_internal_has_rrq() const {
  return msg_case() == kRrq;
}
inline bool Mensagem::has_rrq() const {
  return _internal_has_rrq();
}
inline void Mensagem::set_has_rrq() {
  _impl_._oneof_case_[0] = kRrq;
}
inline void Mensagem::clear_rrq() {
  if (_internal_has_rrq()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.rrq_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::REQ* Mensagem::release_rrq() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.rrq)
  if (_internal_has_rrq()) {
    clear_has_msg();
    ::tftp2::REQ* temp = _impl_.msg_.rrq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.rrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::REQ& Mensagem::_internal_rrq() const {
  return _internal_has_rrq()
      ? *_impl_.msg_.rrq_
      : reinterpret_cast< ::tftp2::REQ&>(::tftp2::_REQ_default_instance_);
}
inline const ::tftp2::REQ& Mensagem::rrq() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.rrq)
  return _internal_rrq();
}
inline ::tftp2::REQ* Mensagem::unsafe_arena_release_rrq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.rrq)
  if (_internal_has_rrq()) {
    clear_has_msg();
    ::tftp2::REQ* temp = _impl_.msg_.rrq_;
    _impl_.msg_.rrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_rrq(::tftp2::REQ* rrq) {
  clear_msg();
  if (rrq) {
    set_has_rrq();
    _impl_.msg_.rrq_ = rrq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.rrq)
}
inline ::tftp2::REQ* Mensagem::_internal_mutable_rrq() {
  if (!_internal_has_rrq()) {
    clear_msg();
    set_has_rrq();
    _impl_.msg_.rrq_ = CreateMaybeMessage< ::tftp2::REQ >(GetArenaForAllocation());
  }
  return _impl_.msg_.rrq_;
}
inline ::tftp2::REQ* Mensagem::mutable_rrq() {
  ::tftp2::REQ* _msg = _internal_mutable_rrq();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.rrq)
  return _msg;
}

// .tftp2.REQ wrq = 2;
inline bool Mensagem::_internal_has_wrq() const {
  return msg_case() == kWrq;
}
inline bool Mensagem::has_wrq() const {
  return _internal_has_wrq();
}
inline void Mensagem::set_has_wrq() {
  _impl_._oneof_case_[0] = kWrq;
}
inline void Mensagem::clear_wrq() {
  if (_internal_has_wrq()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.wrq_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::REQ* Mensagem::release_wrq() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.wrq)
  if (_internal_has_wrq()) {
    clear_has_msg();
    ::tftp2::REQ* temp = _impl_.msg_.wrq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.wrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::REQ& Mensagem::_internal_wrq() const {
  return _internal_has_wrq()
      ? *_impl_.msg_.wrq_
      : reinterpret_cast< ::tftp2::REQ&>(::tftp2::_REQ_default_instance_);
}
inline const ::tftp2::REQ& Mensagem::wrq() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.wrq)
  return _internal_wrq();
}
inline ::tftp2::REQ* Mensagem::unsafe_arena_release_wrq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.wrq)
  if (_internal_has_wrq()) {
    clear_has_msg();
    ::tftp2::REQ* temp = _impl_.msg_.wrq_;
    _impl_.msg_.wrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_wrq(::tftp2::REQ* wrq) {
  clear_msg();
  if (wrq) {
    set_has_wrq();
    _impl_.msg_.wrq_ = wrq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.wrq)
}
inline ::tftp2::REQ* Mensagem::_internal_mutable_wrq() {
  if (!_internal_has_wrq()) {
    clear_msg();
    set_has_wrq();
    _impl_.msg_.wrq_ = CreateMaybeMessage< ::tftp2::REQ >(GetArenaForAllocation());
  }
  return _impl_.msg_.wrq_;
}
inline ::tftp2::REQ* Mensagem::mutable_wrq() {
  ::tftp2::REQ* _msg = _internal_mutable_wrq();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.wrq)
  return _msg;
}

// .tftp2.DATA data = 3;
inline bool Mensagem::_internal_has_data() const {
  return msg_case() == kData;
}
inline bool Mensagem::has_data() const {
  return _internal_has_data();
}
inline void Mensagem::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void Mensagem::clear_data() {
  if (_internal_has_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.data_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::DATA* Mensagem::release_data() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.data)
  if (_internal_has_data()) {
    clear_has_msg();
    ::tftp2::DATA* temp = _impl_.msg_.data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::DATA& Mensagem::_internal_data() const {
  return _internal_has_data()
      ? *_impl_.msg_.data_
      : reinterpret_cast< ::tftp2::DATA&>(::tftp2::_DATA_default_instance_);
}
inline const ::tftp2::DATA& Mensagem::data() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.data)
  return _internal_data();
}
inline ::tftp2::DATA* Mensagem::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.data)
  if (_internal_has_data()) {
    clear_has_msg();
    ::tftp2::DATA* temp = _impl_.msg_.data_;
    _impl_.msg_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_data(::tftp2::DATA* data) {
  clear_msg();
  if (data) {
    set_has_data();
    _impl_.msg_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.data)
}
inline ::tftp2::DATA* Mensagem::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_msg();
    set_has_data();
    _impl_.msg_.data_ = CreateMaybeMessage< ::tftp2::DATA >(GetArenaForAllocation());
  }
  return _impl_.msg_.data_;
}
inline ::tftp2::DATA* Mensagem::mutable_data() {
  ::tftp2::DATA* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.data)
  return _msg;
}

// .tftp2.ACK ack = 4;
inline bool Mensagem::_internal_has_ack() const {
  return msg_case() == kAck;
}
inline bool Mensagem::has_ack() const {
  return _internal_has_ack();
}
inline void Mensagem::set_has_ack() {
  _impl_._oneof_case_[0] = kAck;
}
inline void Mensagem::clear_ack() {
  if (_internal_has_ack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.ack_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::ACK* Mensagem::release_ack() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.ack)
  if (_internal_has_ack()) {
    clear_has_msg();
    ::tftp2::ACK* temp = _impl_.msg_.ack_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::ACK& Mensagem::_internal_ack() const {
  return _internal_has_ack()
      ? *_impl_.msg_.ack_
      : reinterpret_cast< ::tftp2::ACK&>(::tftp2::_ACK_default_instance_);
}
inline const ::tftp2::ACK& Mensagem::ack() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.ack)
  return _internal_ack();
}
inline ::tftp2::ACK* Mensagem::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.ack)
  if (_internal_has_ack()) {
    clear_has_msg();
    ::tftp2::ACK* temp = _impl_.msg_.ack_;
    _impl_.msg_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_ack(::tftp2::ACK* ack) {
  clear_msg();
  if (ack) {
    set_has_ack();
    _impl_.msg_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.ack)
}
inline ::tftp2::ACK* Mensagem::_internal_mutable_ack() {
  if (!_internal_has_ack()) {
    clear_msg();
    set_has_ack();
    _impl_.msg_.ack_ = CreateMaybeMessage< ::tftp2::ACK >(GetArenaForAllocation());
  }
  return _impl_.msg_.ack_;
}
inline ::tftp2::ACK* Mensagem::mutable_ack() {
  ::tftp2::ACK* _msg = _internal_mutable_ack();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.ack)
  return _msg;
}

// .tftp2.Error error = 5;
inline bool Mensagem::_internal_has_error() const {
  return msg_case() == kError;
}
inline bool Mensagem::has_error() const {
  return _internal_has_error();
}
inline void Mensagem::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void Mensagem::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.error_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::Error* Mensagem::release_error() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.error)
  if (_internal_has_error()) {
    clear_has_msg();
    ::tftp2::Error* temp = _impl_.msg_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::Error& Mensagem::_internal_error() const {
  return _internal_has_error()
      ? *_impl_.msg_.error_
      : reinterpret_cast< ::tftp2::Error&>(::tftp2::_Error_default_instance_);
}
inline const ::tftp2::Error& Mensagem::error() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.error)
  return _internal_error();
}
inline ::tftp2::Error* Mensagem::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.error)
  if (_internal_has_error()) {
    clear_has_msg();
    ::tftp2::Error* temp = _impl_.msg_.error_;
    _impl_.msg_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_error(::tftp2::Error* error) {
  clear_msg();
  if (error) {
    set_has_error();
    _impl_.msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.error)
}
inline ::tftp2::Error* Mensagem::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_msg();
    set_has_error();
    _impl_.msg_.error_ = CreateMaybeMessage< ::tftp2::Error >(GetArenaForAllocation());
  }
  return _impl_.msg_.error_;
}
inline ::tftp2::Error* Mensagem::mutable_error() {
  ::tftp2::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.error)
  return _msg;
}

// .tftp2.Path list = 6;
inline bool Mensagem::_internal_has_list() const {
  return msg_case() == kList;
}
inline bool Mensagem::has_list() const {
  return _internal_has_list();
}
inline void Mensagem::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Mensagem::clear_list() {
  if (_internal_has_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.list_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::Path* Mensagem::release_list() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.list)
  if (_internal_has_list()) {
    clear_has_msg();
    ::tftp2::Path* temp = _impl_.msg_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::Path& Mensagem::_internal_list() const {
  return _internal_has_list()
      ? *_impl_.msg_.list_
      : reinterpret_cast< ::tftp2::Path&>(::tftp2::_Path_default_instance_);
}
inline const ::tftp2::Path& Mensagem::list() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.list)
  return _internal_list();
}
inline ::tftp2::Path* Mensagem::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.list)
  if (_internal_has_list()) {
    clear_has_msg();
    ::tftp2::Path* temp = _impl_.msg_.list_;
    _impl_.msg_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_list(::tftp2::Path* list) {
  clear_msg();
  if (list) {
    set_has_list();
    _impl_.msg_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.list)
}
inline ::tftp2::Path* Mensagem::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_msg();
    set_has_list();
    _impl_.msg_.list_ = CreateMaybeMessage< ::tftp2::Path >(GetArenaForAllocation());
  }
  return _impl_.msg_.list_;
}
inline ::tftp2::Path* Mensagem::mutable_list() {
  ::tftp2::Path* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.list)
  return _msg;
}

// .tftp2.ListResponse list_resp = 7;
inline bool Mensagem::_internal_has_list_resp() const {
  return msg_case() == kListResp;
}
inline bool Mensagem::has_list_resp() const {
  return _internal_has_list_resp();
}
inline void Mensagem::set_has_list_resp() {
  _impl_._oneof_case_[0] = kListResp;
}
inline void Mensagem::clear_list_resp() {
  if (_internal_has_list_resp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.list_resp_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::ListResponse* Mensagem::release_list_resp() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.list_resp)
  if (_internal_has_list_resp()) {
    clear_has_msg();
    ::tftp2::ListResponse* temp = _impl_.msg_.list_resp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.list_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::ListResponse& Mensagem::_internal_list_resp() const {
  return _internal_has_list_resp()
      ? *_impl_.msg_.list_resp_
      : reinterpret_cast< ::tftp2::ListResponse&>(::tftp2::_ListResponse_default_instance_);
}
inline const ::tftp2::ListResponse& Mensagem::list_resp() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.list_resp)
  return _internal_list_resp();
}
inline ::tftp2::ListResponse* Mensagem::unsafe_arena_release_list_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.list_resp)
  if (_internal_has_list_resp()) {
    clear_has_msg();
    ::tftp2::ListResponse* temp = _impl_.msg_.list_resp_;
    _impl_.msg_.list_resp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_list_resp(::tftp2::ListResponse* list_resp) {
  clear_msg();
  if (list_resp) {
    set_has_list_resp();
    _impl_.msg_.list_resp_ = list_resp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.list_resp)
}
inline ::tftp2::ListResponse* Mensagem::_internal_mutable_list_resp() {
  if (!_internal_has_list_resp()) {
    clear_msg();
    set_has_list_resp();
    _impl_.msg_.list_resp_ = CreateMaybeMessage< ::tftp2::ListResponse >(GetArenaForAllocation());
  }
  return _impl_.msg_.list_resp_;
}
inline ::tftp2::ListResponse* Mensagem::mutable_list_resp() {
  ::tftp2::ListResponse* _msg = _internal_mutable_list_resp();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.list_resp)
  return _msg;
}

// .tftp2.Path mkdir = 8;
inline bool Mensagem::_internal_has_mkdir() const {
  return msg_case() == kMkdir;
}
inline bool Mensagem::has_mkdir() const {
  return _internal_has_mkdir();
}
inline void Mensagem::set_has_mkdir() {
  _impl_._oneof_case_[0] = kMkdir;
}
inline void Mensagem::clear_mkdir() {
  if (_internal_has_mkdir()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.mkdir_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::Path* Mensagem::release_mkdir() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.mkdir)
  if (_internal_has_mkdir()) {
    clear_has_msg();
    ::tftp2::Path* temp = _impl_.msg_.mkdir_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::Path& Mensagem::_internal_mkdir() const {
  return _internal_has_mkdir()
      ? *_impl_.msg_.mkdir_
      : reinterpret_cast< ::tftp2::Path&>(::tftp2::_Path_default_instance_);
}
inline const ::tftp2::Path& Mensagem::mkdir() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.mkdir)
  return _internal_mkdir();
}
inline ::tftp2::Path* Mensagem::unsafe_arena_release_mkdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.mkdir)
  if (_internal_has_mkdir()) {
    clear_has_msg();
    ::tftp2::Path* temp = _impl_.msg_.mkdir_;
    _impl_.msg_.mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_mkdir(::tftp2::Path* mkdir) {
  clear_msg();
  if (mkdir) {
    set_has_mkdir();
    _impl_.msg_.mkdir_ = mkdir;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.mkdir)
}
inline ::tftp2::Path* Mensagem::_internal_mutable_mkdir() {
  if (!_internal_has_mkdir()) {
    clear_msg();
    set_has_mkdir();
    _impl_.msg_.mkdir_ = CreateMaybeMessage< ::tftp2::Path >(GetArenaForAllocation());
  }
  return _impl_.msg_.mkdir_;
}
inline ::tftp2::Path* Mensagem::mutable_mkdir() {
  ::tftp2::Path* _msg = _internal_mutable_mkdir();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.mkdir)
  return _msg;
}

// .tftp2.MOVE move = 9;
inline bool Mensagem::_internal_has_move() const {
  return msg_case() == kMove;
}
inline bool Mensagem::has_move() const {
  return _internal_has_move();
}
inline void Mensagem::set_has_move() {
  _impl_._oneof_case_[0] = kMove;
}
inline void Mensagem::clear_move() {
  if (_internal_has_move()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.msg_.move_;
    }
    clear_has_msg();
  }
}
inline ::tftp2::MOVE* Mensagem::release_move() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.move)
  if (_internal_has_move()) {
    clear_has_msg();
    ::tftp2::MOVE* temp = _impl_.msg_.move_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::MOVE& Mensagem::_internal_move() const {
  return _internal_has_move()
      ? *_impl_.msg_.move_
      : reinterpret_cast< ::tftp2::MOVE&>(::tftp2::_MOVE_default_instance_);
}
inline const ::tftp2::MOVE& Mensagem::move() const {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.move)
  return _internal_move();
}
inline ::tftp2::MOVE* Mensagem::unsafe_arena_release_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.move)
  if (_internal_has_move()) {
    clear_has_msg();
    ::tftp2::MOVE* temp = _impl_.msg_.move_;
    _impl_.msg_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_move(::tftp2::MOVE* move) {
  clear_msg();
  if (move) {
    set_has_move();
    _impl_.msg_.move_ = move;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.move)
}
inline ::tftp2::MOVE* Mensagem::_internal_mutable_move() {
  if (!_internal_has_move()) {
    clear_msg();
    set_has_move();
    _impl_.msg_.move_ = CreateMaybeMessage< ::tftp2::MOVE >(GetArenaForAllocation());
  }
  return _impl_.msg_.move_;
}
inline ::tftp2::MOVE* Mensagem::mutable_move() {
  ::tftp2::MOVE* _msg = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.move)
  return _msg;
}

inline bool Mensagem::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Mensagem::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline Mensagem::MsgCase Mensagem::msg_case() const {
  return Mensagem::MsgCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tftp2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tftp2::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tftp2::Mode>() {
  return ::tftp2::Mode_descriptor();
}
template <> struct is_proto_enum< ::tftp2::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tftp2::ErrorCode>() {
  return ::tftp2::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
