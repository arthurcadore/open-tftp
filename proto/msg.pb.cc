// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tftp2 {
PROTOBUF_CONSTEXPR REQ::REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/1} {}
struct REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~REQDefaultTypeInternal() {}
  union {
    REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 REQDefaultTypeInternal _REQ_default_instance_;
PROTOBUF_CONSTEXPR DATA::DATA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_n_)*/0u} {}
struct DATADefaultTypeInternal {
  PROTOBUF_CONSTEXPR DATADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DATADefaultTypeInternal() {}
  union {
    DATA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DATADefaultTypeInternal _DATA_default_instance_;
PROTOBUF_CONSTEXPR ACK::ACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_n_)*/0u} {}
struct ACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ACKDefaultTypeInternal() {}
  union {
    ACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ACKDefaultTypeInternal _ACK_default_instance_;
PROTOBUF_CONSTEXPR Error::Error(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errorcode_)*/1} {}
struct ErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorDefaultTypeInternal _Error_default_instance_;
PROTOBUF_CONSTEXPR Path::Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;
PROTOBUF_CONSTEXPR ListResponse::ListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResponseDefaultTypeInternal() {}
  union {
    ListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResponseDefaultTypeInternal _ListResponse_default_instance_;
PROTOBUF_CONSTEXPR ListItem::ListItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListItemDefaultTypeInternal() {}
  union {
    ListItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListItemDefaultTypeInternal _ListItem_default_instance_;
PROTOBUF_CONSTEXPR FILE::FILE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nome_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tamanho_)*/0} {}
struct FILEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FILEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FILEDefaultTypeInternal() {}
  union {
    FILE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FILEDefaultTypeInternal _FILE_default_instance_;
PROTOBUF_CONSTEXPR MOVE::MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nome_orig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nome_novo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MOVEDefaultTypeInternal() {}
  union {
    MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MOVEDefaultTypeInternal _MOVE_default_instance_;
PROTOBUF_CONSTEXPR Mensagem::Mensagem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MensagemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MensagemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MensagemDefaultTypeInternal() {}
  union {
    Mensagem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MensagemDefaultTypeInternal _Mensagem_default_instance_;
}  // namespace tftp2
static ::_pb::Metadata file_level_metadata_msg_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tftp2::REQ, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::REQ, _impl_.fname_),
  PROTOBUF_FIELD_OFFSET(::tftp2::REQ, _impl_.mode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tftp2::DATA, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::DATA, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::tftp2::DATA, _impl_.block_n_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tftp2::ACK, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::ACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::ACK, _impl_.block_n_),
  0,
  PROTOBUF_FIELD_OFFSET(::tftp2::Error, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::Error, _impl_.errorcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::tftp2::Path, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::Path, _impl_.path_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tftp2::ListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::ListResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _impl_.answer_),
  PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _impl_.nome_),
  PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _impl_.tamanho_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _impl_.nome_orig_),
  PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _impl_.nome_novo_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _impl_.msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tftp2::REQ)},
  { 10, 18, -1, sizeof(::tftp2::DATA)},
  { 20, 27, -1, sizeof(::tftp2::ACK)},
  { 28, 35, -1, sizeof(::tftp2::Error)},
  { 36, 43, -1, sizeof(::tftp2::Path)},
  { 44, -1, -1, sizeof(::tftp2::ListResponse)},
  { 51, -1, -1, sizeof(::tftp2::ListItem)},
  { 60, 68, -1, sizeof(::tftp2::FILE)},
  { 70, 78, -1, sizeof(::tftp2::MOVE)},
  { 80, -1, -1, sizeof(::tftp2::Mensagem)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tftp2::_REQ_default_instance_._instance,
  &::tftp2::_DATA_default_instance_._instance,
  &::tftp2::_ACK_default_instance_._instance,
  &::tftp2::_Error_default_instance_._instance,
  &::tftp2::_Path_default_instance_._instance,
  &::tftp2::_ListResponse_default_instance_._instance,
  &::tftp2::_ListItem_default_instance_._instance,
  &::tftp2::_FILE_default_instance_._instance,
  &::tftp2::_MOVE_default_instance_._instance,
  &::tftp2::_Mensagem_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\005tftp2\"/\n\003REQ\022\r\n\005fname\030\001 \002(\t"
  "\022\031\n\004mode\030\002 \002(\0162\013.tftp2.Mode\"(\n\004DATA\022\017\n\007m"
  "essage\030\001 \002(\014\022\017\n\007block_n\030\002 \002(\r\"\026\n\003ACK\022\017\n\007"
  "block_n\030\001 \002(\r\",\n\005Error\022#\n\terrorcode\030\001 \002("
  "\0162\020.tftp2.ErrorCode\"\024\n\004Path\022\014\n\004path\030\001 \002("
  "\t\".\n\014ListResponse\022\036\n\005items\030\001 \003(\0132\017.tftp2"
  ".ListItem\"M\n\010ListItem\022\033\n\004file\030\001 \001(\0132\013.tf"
  "tp2.FILEH\000\022\032\n\003dir\030\002 \001(\0132\013.tftp2.PathH\000B\010"
  "\n\006answer\"%\n\004FILE\022\014\n\004nome\030\001 \002(\t\022\017\n\007tamanh"
  "o\030\002 \002(\005\",\n\004MOVE\022\021\n\tnome_orig\030\001 \002(\t\022\021\n\tno"
  "me_novo\030\002 \001(\t\"\240\002\n\010Mensagem\022\031\n\003rrq\030\001 \001(\0132"
  "\n.tftp2.REQH\000\022\031\n\003wrq\030\002 \001(\0132\n.tftp2.REQH\000"
  "\022\033\n\004data\030\003 \001(\0132\013.tftp2.DATAH\000\022\031\n\003ack\030\004 \001"
  "(\0132\n.tftp2.ACKH\000\022\035\n\005error\030\005 \001(\0132\014.tftp2."
  "ErrorH\000\022\033\n\004list\030\006 \001(\0132\013.tftp2.PathH\000\022(\n\t"
  "list_resp\030\007 \001(\0132\023.tftp2.ListResponseH\000\022\034"
  "\n\005mkdir\030\010 \001(\0132\013.tftp2.PathH\000\022\033\n\004move\030\t \001"
  "(\0132\013.tftp2.MOVEH\000B\005\n\003msg*)\n\004Mode\022\014\n\010neta"
  "scii\020\001\022\t\n\005octet\020\002\022\010\n\004mail\020\003*\231\001\n\tErrorCod"
  "e\022\020\n\014FileNotFound\020\001\022\023\n\017AccessViolation\020\002"
  "\022\014\n\010DiskFull\020\003\022\024\n\020IllegalOperation\020\004\022\016\n\n"
  "UnknownTid\020\005\022\016\n\nFileExists\020\006\022\022\n\016UnknownS"
  "ession\020\007\022\r\n\tUndefined\020\010"
  ;
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 903, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace tftp2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool Mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<REQ>()._impl_._has_bits_);
  static void set_has_fname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

REQ::REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.REQ)
}
REQ::REQ(const REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fname_){}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fname()) {
    _this->_impl_.fname_.Set(from._internal_fname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:tftp2.REQ)
}

inline void REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fname_){}
    , decltype(_impl_.mode_){1}
  };
  _impl_.fname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

REQ::~REQ() {
  // @@protoc_insertion_point(destructor:tftp2.REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fname_.Destroy();
}

void REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.fname_.ClearNonDefaultToEmpty();
    }
    _impl_.mode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string fname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.REQ.fname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .tftp2.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tftp2::Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::tftp2::Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string fname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fname().data(), static_cast<int>(this->_internal_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tftp2.REQ.fname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fname(), target);
  }

  // required .tftp2.Mode mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.REQ)
  return target;
}

size_t REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tftp2.REQ)
  size_t total_size = 0;

  if (_internal_has_fname()) {
    // required string fname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fname());
  }

  if (_internal_has_mode()) {
    // required .tftp2.Mode mode = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return total_size;
}
size_t REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.REQ)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string fname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fname());

    // required .tftp2.Mode mode = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*REQ::GetClassData() const { return &_class_data_; }


void REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<REQ*>(&to_msg);
  auto& from = static_cast<const REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_fname(from._internal_fname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void REQ::CopyFrom(const REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQ::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void REQ::InternalSwap(REQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fname_, lhs_arena,
      &other->_impl_.fname_, rhs_arena
  );
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class DATA::_Internal {
 public:
  using HasBits = decltype(std::declval<DATA>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DATA::DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.DATA)
}
DATA::DATA(const DATA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DATA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.block_n_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.block_n_ = from._impl_.block_n_;
  // @@protoc_insertion_point(copy_constructor:tftp2.DATA)
}

inline void DATA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.block_n_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DATA::~DATA() {
  // @@protoc_insertion_point(destructor:tftp2.DATA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DATA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void DATA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.DATA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.block_n_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DATA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 block_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_block_n(&has_bits);
          _impl_.block_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DATA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.DATA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required uint32 block_n = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.DATA)
  return target;
}

size_t DATA::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tftp2.DATA)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required bytes message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  if (_internal_has_block_n()) {
    // required uint32 block_n = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_n());
  }

  return total_size;
}
size_t DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.DATA)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());

    // required uint32 block_n = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_n());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DATA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DATA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DATA::GetClassData() const { return &_class_data_; }


void DATA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DATA*>(&to_msg);
  auto& from = static_cast<const DATA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.DATA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.block_n_ = from._impl_.block_n_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DATA::CopyFrom(const DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DATA::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DATA::InternalSwap(DATA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.block_n_, other->_impl_.block_n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DATA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class ACK::_Internal {
 public:
  using HasBits = decltype(std::declval<ACK>()._impl_._has_bits_);
  static void set_has_block_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ACK::ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.ACK)
}
ACK::ACK(const ACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_n_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.block_n_ = from._impl_.block_n_;
  // @@protoc_insertion_point(copy_constructor:tftp2.ACK)
}

inline void ACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_n_){0u}
  };
}

ACK::~ACK() {
  // @@protoc_insertion_point(destructor:tftp2.ACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ACK::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.ACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_n_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 block_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_block_n(&has_bits);
          _impl_.block_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.ACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 block_n = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.ACK)
  return target;
}

size_t ACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.ACK)
  size_t total_size = 0;

  // required uint32 block_n = 1;
  if (_internal_has_block_n()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_n());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ACK::GetClassData() const { return &_class_data_; }


void ACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ACK*>(&to_msg);
  auto& from = static_cast<const ACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.ACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_n()) {
    _this->_internal_set_block_n(from._internal_block_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ACK::CopyFrom(const ACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACK::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ACK::InternalSwap(ACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.block_n_, other->_impl_.block_n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class Error::_Internal {
 public:
  using HasBits = decltype(std::declval<Error>()._impl_._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Error* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errorcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.errorcode_ = from._impl_.errorcode_;
  // @@protoc_insertion_point(copy_constructor:tftp2.Error)
}

inline void Error::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errorcode_){1}
  };
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:tftp2.Error)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Error::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errorcode_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .tftp2.ErrorCode errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tftp2::ErrorCode_IsValid(val))) {
            _internal_set_errorcode(static_cast<::tftp2::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .tftp2.ErrorCode errorcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.Error)
  size_t total_size = 0;

  // required .tftp2.ErrorCode errorcode = 1;
  if (_internal_has_errorcode()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errorcode());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }


void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Error*>(&to_msg);
  auto& from = static_cast<const Error&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.Error)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.errorcode_, other->_impl_.errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class Path::_Internal {
 public:
  using HasBits = decltype(std::declval<Path>()._impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.Path)
}

inline void Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:tftp2.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.Path.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tftp2.Path.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.Path)
  size_t total_size = 0;

  // required string path = 1;
  if (_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }


void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Path*>(&to_msg);
  auto& from = static_cast<const Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class ListResponse::_Internal {
 public:
};

ListResponse::ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.ListResponse)
}
ListResponse::ListResponse(const ListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tftp2.ListResponse)
}

inline void ListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:tftp2.ListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.ListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tftp2.ListItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.ListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tftp2.ListItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.ListResponse)
  return target;
}

size_t ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.ListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tftp2.ListItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResponse::GetClassData() const { return &_class_data_; }


void ListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResponse*>(&to_msg);
  auto& from = static_cast<const ListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.ListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResponse::CopyFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.items_))
    return false;
  return true;
}

void ListResponse::InternalSwap(ListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class ListItem::_Internal {
 public:
  static const ::tftp2::FILE& file(const ListItem* msg);
  static const ::tftp2::Path& dir(const ListItem* msg);
};

const ::tftp2::FILE&
ListItem::_Internal::file(const ListItem* msg) {
  return *msg->_impl_.answer_.file_;
}
const ::tftp2::Path&
ListItem::_Internal::dir(const ListItem* msg) {
  return *msg->_impl_.answer_.dir_;
}
void ListItem::set_allocated_file(::tftp2::FILE* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_answer();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.answer_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.ListItem.file)
}
void ListItem::set_allocated_dir(::tftp2::Path* dir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_answer();
  if (dir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dir);
    if (message_arena != submessage_arena) {
      dir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dir, submessage_arena);
    }
    set_has_dir();
    _impl_.answer_.dir_ = dir;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.ListItem.dir)
}
ListItem::ListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.ListItem)
}
ListItem::ListItem(const ListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_answer();
  switch (from.answer_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::tftp2::FILE::MergeFrom(
          from._internal_file());
      break;
    }
    case kDir: {
      _this->_internal_mutable_dir()->::tftp2::Path::MergeFrom(
          from._internal_dir());
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.ListItem)
}

inline void ListItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_answer();
}

ListItem::~ListItem() {
  // @@protoc_insertion_point(destructor:tftp2.ListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_answer()) {
    clear_answer();
  }
}

void ListItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListItem::clear_answer() {
// @@protoc_insertion_point(one_of_clear_start:tftp2.ListItem)
  switch (answer_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.answer_.file_;
      }
      break;
    }
    case kDir: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.answer_.dir_;
      }
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ANSWER_NOT_SET;
}


void ListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.ListItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_answer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tftp2.FILE file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.Path dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.ListItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (answer_case()) {
    case kFile: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::file(this),
          _Internal::file(this).GetCachedSize(), target, stream);
      break;
    }
    case kDir: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::dir(this),
          _Internal::dir(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.ListItem)
  return target;
}

size_t ListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.ListItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (answer_case()) {
    // .tftp2.FILE file = 1;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.answer_.file_);
      break;
    }
    // .tftp2.Path dir = 2;
    case kDir: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.answer_.dir_);
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListItem::GetClassData() const { return &_class_data_; }


void ListItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListItem*>(&to_msg);
  auto& from = static_cast<const ListItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.ListItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.answer_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::tftp2::FILE::MergeFrom(
          from._internal_file());
      break;
    }
    case kDir: {
      _this->_internal_mutable_dir()->::tftp2::Path::MergeFrom(
          from._internal_dir());
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListItem::CopyFrom(const ListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.ListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItem::IsInitialized() const {
  switch (answer_case()) {
    case kFile: {
      if (_internal_has_file()) {
        if (!_impl_.answer_.file_->IsInitialized()) return false;
      }
      break;
    }
    case kDir: {
      if (_internal_has_dir()) {
        if (!_impl_.answer_.dir_->IsInitialized()) return false;
      }
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  return true;
}

void ListItem::InternalSwap(ListItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.answer_, other->_impl_.answer_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class FILE::_Internal {
 public:
  using HasBits = decltype(std::declval<FILE>()._impl_._has_bits_);
  static void set_has_nome(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tamanho(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FILE::FILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.FILE)
}
FILE::FILE(const FILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FILE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nome_){}
    , decltype(_impl_.tamanho_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nome_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nome()) {
    _this->_impl_.nome_.Set(from._internal_nome(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tamanho_ = from._impl_.tamanho_;
  // @@protoc_insertion_point(copy_constructor:tftp2.FILE)
}

inline void FILE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nome_){}
    , decltype(_impl_.tamanho_){0}
  };
  _impl_.nome_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FILE::~FILE() {
  // @@protoc_insertion_point(destructor:tftp2.FILE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FILE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nome_.Destroy();
}

void FILE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FILE::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.FILE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.nome_.ClearNonDefaultToEmpty();
  }
  _impl_.tamanho_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FILE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string nome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nome();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.FILE.nome");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 tamanho = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tamanho(&has_bits);
          _impl_.tamanho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FILE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.FILE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string nome = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nome().data(), static_cast<int>(this->_internal_nome().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tftp2.FILE.nome");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nome(), target);
  }

  // required int32 tamanho = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tamanho(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.FILE)
  return target;
}

size_t FILE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tftp2.FILE)
  size_t total_size = 0;

  if (_internal_has_nome()) {
    // required string nome = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nome());
  }

  if (_internal_has_tamanho()) {
    // required int32 tamanho = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tamanho());
  }

  return total_size;
}
size_t FILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.FILE)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string nome = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nome());

    // required int32 tamanho = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tamanho());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FILE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FILE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FILE::GetClassData() const { return &_class_data_; }


void FILE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FILE*>(&to_msg);
  auto& from = static_cast<const FILE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.FILE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nome(from._internal_nome());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tamanho_ = from._impl_.tamanho_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FILE::CopyFrom(const FILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.FILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FILE::InternalSwap(FILE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nome_, lhs_arena,
      &other->_impl_.nome_, rhs_arena
  );
  swap(_impl_.tamanho_, other->_impl_.tamanho_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FILE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class MOVE::_Internal {
 public:
  using HasBits = decltype(std::declval<MOVE>()._impl_._has_bits_);
  static void set_has_nome_orig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nome_novo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MOVE::MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.MOVE)
}
MOVE::MOVE(const MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nome_orig_){}
    , decltype(_impl_.nome_novo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nome_orig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_orig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nome_orig()) {
    _this->_impl_.nome_orig_.Set(from._internal_nome_orig(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nome_novo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_novo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nome_novo()) {
    _this->_impl_.nome_novo_.Set(from._internal_nome_novo(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.MOVE)
}

inline void MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nome_orig_){}
    , decltype(_impl_.nome_novo_){}
  };
  _impl_.nome_orig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_orig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nome_novo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nome_novo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MOVE::~MOVE() {
  // @@protoc_insertion_point(destructor:tftp2.MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nome_orig_.Destroy();
  _impl_.nome_novo_.Destroy();
}

void MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nome_orig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nome_novo_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string nome_orig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nome_orig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.MOVE.nome_orig");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string nome_novo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nome_novo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.MOVE.nome_novo");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string nome_orig = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nome_orig().data(), static_cast<int>(this->_internal_nome_orig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tftp2.MOVE.nome_orig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nome_orig(), target);
  }

  // optional string nome_novo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nome_novo().data(), static_cast<int>(this->_internal_nome_novo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tftp2.MOVE.nome_novo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nome_novo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.MOVE)
  return target;
}

size_t MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.MOVE)
  size_t total_size = 0;

  // required string nome_orig = 1;
  if (_internal_has_nome_orig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nome_orig());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string nome_novo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nome_novo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MOVE::GetClassData() const { return &_class_data_; }


void MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MOVE*>(&to_msg);
  auto& from = static_cast<const MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nome_orig(from._internal_nome_orig());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_nome_novo(from._internal_nome_novo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MOVE::CopyFrom(const MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MOVE::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MOVE::InternalSwap(MOVE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nome_orig_, lhs_arena,
      &other->_impl_.nome_orig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nome_novo_, lhs_arena,
      &other->_impl_.nome_novo_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class Mensagem::_Internal {
 public:
  static const ::tftp2::REQ& rrq(const Mensagem* msg);
  static const ::tftp2::REQ& wrq(const Mensagem* msg);
  static const ::tftp2::DATA& data(const Mensagem* msg);
  static const ::tftp2::ACK& ack(const Mensagem* msg);
  static const ::tftp2::Error& error(const Mensagem* msg);
  static const ::tftp2::Path& list(const Mensagem* msg);
  static const ::tftp2::ListResponse& list_resp(const Mensagem* msg);
  static const ::tftp2::Path& mkdir(const Mensagem* msg);
  static const ::tftp2::MOVE& move(const Mensagem* msg);
};

const ::tftp2::REQ&
Mensagem::_Internal::rrq(const Mensagem* msg) {
  return *msg->_impl_.msg_.rrq_;
}
const ::tftp2::REQ&
Mensagem::_Internal::wrq(const Mensagem* msg) {
  return *msg->_impl_.msg_.wrq_;
}
const ::tftp2::DATA&
Mensagem::_Internal::data(const Mensagem* msg) {
  return *msg->_impl_.msg_.data_;
}
const ::tftp2::ACK&
Mensagem::_Internal::ack(const Mensagem* msg) {
  return *msg->_impl_.msg_.ack_;
}
const ::tftp2::Error&
Mensagem::_Internal::error(const Mensagem* msg) {
  return *msg->_impl_.msg_.error_;
}
const ::tftp2::Path&
Mensagem::_Internal::list(const Mensagem* msg) {
  return *msg->_impl_.msg_.list_;
}
const ::tftp2::ListResponse&
Mensagem::_Internal::list_resp(const Mensagem* msg) {
  return *msg->_impl_.msg_.list_resp_;
}
const ::tftp2::Path&
Mensagem::_Internal::mkdir(const Mensagem* msg) {
  return *msg->_impl_.msg_.mkdir_;
}
const ::tftp2::MOVE&
Mensagem::_Internal::move(const Mensagem* msg) {
  return *msg->_impl_.msg_.move_;
}
void Mensagem::set_allocated_rrq(::tftp2::REQ* rrq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (rrq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rrq);
    if (message_arena != submessage_arena) {
      rrq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rrq, submessage_arena);
    }
    set_has_rrq();
    _impl_.msg_.rrq_ = rrq;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.rrq)
}
void Mensagem::set_allocated_wrq(::tftp2::REQ* wrq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (wrq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wrq);
    if (message_arena != submessage_arena) {
      wrq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrq, submessage_arena);
    }
    set_has_wrq();
    _impl_.msg_.wrq_ = wrq;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.wrq)
}
void Mensagem::set_allocated_data(::tftp2::DATA* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.msg_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.data)
}
void Mensagem::set_allocated_ack(::tftp2::ACK* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ack);
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    set_has_ack();
    _impl_.msg_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.ack)
}
void Mensagem::set_allocated_error(::tftp2::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.msg_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.error)
}
void Mensagem::set_allocated_list(::tftp2::Path* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.msg_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.list)
}
void Mensagem::set_allocated_list_resp(::tftp2::ListResponse* list_resp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (list_resp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_resp);
    if (message_arena != submessage_arena) {
      list_resp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_resp, submessage_arena);
    }
    set_has_list_resp();
    _impl_.msg_.list_resp_ = list_resp;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.list_resp)
}
void Mensagem::set_allocated_mkdir(::tftp2::Path* mkdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (mkdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mkdir);
    if (message_arena != submessage_arena) {
      mkdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mkdir, submessage_arena);
    }
    set_has_mkdir();
    _impl_.msg_.mkdir_ = mkdir;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.mkdir)
}
void Mensagem::set_allocated_move(::tftp2::MOVE* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(move);
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    _impl_.msg_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.move)
}
Mensagem::Mensagem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tftp2.Mensagem)
}
Mensagem::Mensagem(const Mensagem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mensagem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kRrq: {
      _this->_internal_mutable_rrq()->::tftp2::REQ::MergeFrom(
          from._internal_rrq());
      break;
    }
    case kWrq: {
      _this->_internal_mutable_wrq()->::tftp2::REQ::MergeFrom(
          from._internal_wrq());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::tftp2::DATA::MergeFrom(
          from._internal_data());
      break;
    }
    case kAck: {
      _this->_internal_mutable_ack()->::tftp2::ACK::MergeFrom(
          from._internal_ack());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::tftp2::Error::MergeFrom(
          from._internal_error());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::tftp2::Path::MergeFrom(
          from._internal_list());
      break;
    }
    case kListResp: {
      _this->_internal_mutable_list_resp()->::tftp2::ListResponse::MergeFrom(
          from._internal_list_resp());
      break;
    }
    case kMkdir: {
      _this->_internal_mutable_mkdir()->::tftp2::Path::MergeFrom(
          from._internal_mkdir());
      break;
    }
    case kMove: {
      _this->_internal_mutable_move()->::tftp2::MOVE::MergeFrom(
          from._internal_move());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.Mensagem)
}

inline void Mensagem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

Mensagem::~Mensagem() {
  // @@protoc_insertion_point(destructor:tftp2.Mensagem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mensagem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void Mensagem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mensagem::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:tftp2.Mensagem)
  switch (msg_case()) {
    case kRrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.rrq_;
      }
      break;
    }
    case kWrq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.wrq_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.data_;
      }
      break;
    }
    case kAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.ack_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.error_;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.list_;
      }
      break;
    }
    case kListResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.list_resp_;
      }
      break;
    }
    case kMkdir: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.mkdir_;
      }
      break;
    }
    case kMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.move_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void Mensagem::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.Mensagem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mensagem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tftp2.REQ rrq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rrq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.REQ wrq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.DATA data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.ACK ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.Error error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.Path list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.ListResponse list_resp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_resp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.Path mkdir = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mkdir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tftp2.MOVE move = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mensagem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.Mensagem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (msg_case()) {
    case kRrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::rrq(this),
          _Internal::rrq(this).GetCachedSize(), target, stream);
      break;
    }
    case kWrq: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::wrq(this),
          _Internal::wrq(this).GetCachedSize(), target, stream);
      break;
    }
    case kData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::data(this),
          _Internal::data(this).GetCachedSize(), target, stream);
      break;
    }
    case kAck: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::ack(this),
          _Internal::ack(this).GetCachedSize(), target, stream);
      break;
    }
    case kError: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::error(this),
          _Internal::error(this).GetCachedSize(), target, stream);
      break;
    }
    case kList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::list(this),
          _Internal::list(this).GetCachedSize(), target, stream);
      break;
    }
    case kListResp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::list_resp(this),
          _Internal::list_resp(this).GetCachedSize(), target, stream);
      break;
    }
    case kMkdir: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::mkdir(this),
          _Internal::mkdir(this).GetCachedSize(), target, stream);
      break;
    }
    case kMove: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::move(this),
          _Internal::move(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.Mensagem)
  return target;
}

size_t Mensagem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.Mensagem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .tftp2.REQ rrq = 1;
    case kRrq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.rrq_);
      break;
    }
    // .tftp2.REQ wrq = 2;
    case kWrq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.wrq_);
      break;
    }
    // .tftp2.DATA data = 3;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.data_);
      break;
    }
    // .tftp2.ACK ack = 4;
    case kAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.ack_);
      break;
    }
    // .tftp2.Error error = 5;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.error_);
      break;
    }
    // .tftp2.Path list = 6;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.list_);
      break;
    }
    // .tftp2.ListResponse list_resp = 7;
    case kListResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.list_resp_);
      break;
    }
    // .tftp2.Path mkdir = 8;
    case kMkdir: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.mkdir_);
      break;
    }
    // .tftp2.MOVE move = 9;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.move_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mensagem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mensagem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mensagem::GetClassData() const { return &_class_data_; }


void Mensagem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mensagem*>(&to_msg);
  auto& from = static_cast<const Mensagem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.Mensagem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kRrq: {
      _this->_internal_mutable_rrq()->::tftp2::REQ::MergeFrom(
          from._internal_rrq());
      break;
    }
    case kWrq: {
      _this->_internal_mutable_wrq()->::tftp2::REQ::MergeFrom(
          from._internal_wrq());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::tftp2::DATA::MergeFrom(
          from._internal_data());
      break;
    }
    case kAck: {
      _this->_internal_mutable_ack()->::tftp2::ACK::MergeFrom(
          from._internal_ack());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::tftp2::Error::MergeFrom(
          from._internal_error());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::tftp2::Path::MergeFrom(
          from._internal_list());
      break;
    }
    case kListResp: {
      _this->_internal_mutable_list_resp()->::tftp2::ListResponse::MergeFrom(
          from._internal_list_resp());
      break;
    }
    case kMkdir: {
      _this->_internal_mutable_mkdir()->::tftp2::Path::MergeFrom(
          from._internal_mkdir());
      break;
    }
    case kMove: {
      _this->_internal_mutable_move()->::tftp2::MOVE::MergeFrom(
          from._internal_move());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mensagem::CopyFrom(const Mensagem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.Mensagem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mensagem::IsInitialized() const {
  switch (msg_case()) {
    case kRrq: {
      if (_internal_has_rrq()) {
        if (!_impl_.msg_.rrq_->IsInitialized()) return false;
      }
      break;
    }
    case kWrq: {
      if (_internal_has_wrq()) {
        if (!_impl_.msg_.wrq_->IsInitialized()) return false;
      }
      break;
    }
    case kData: {
      if (_internal_has_data()) {
        if (!_impl_.msg_.data_->IsInitialized()) return false;
      }
      break;
    }
    case kAck: {
      if (_internal_has_ack()) {
        if (!_impl_.msg_.ack_->IsInitialized()) return false;
      }
      break;
    }
    case kError: {
      if (_internal_has_error()) {
        if (!_impl_.msg_.error_->IsInitialized()) return false;
      }
      break;
    }
    case kList: {
      if (_internal_has_list()) {
        if (!_impl_.msg_.list_->IsInitialized()) return false;
      }
      break;
    }
    case kListResp: {
      if (_internal_has_list_resp()) {
        if (!_impl_.msg_.list_resp_->IsInitialized()) return false;
      }
      break;
    }
    case kMkdir: {
      if (_internal_has_mkdir()) {
        if (!_impl_.msg_.mkdir_->IsInitialized()) return false;
      }
      break;
    }
    case kMove: {
      if (_internal_has_move()) {
        if (!_impl_.msg_.move_->IsInitialized()) return false;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return true;
}

void Mensagem::InternalSwap(Mensagem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mensagem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tftp2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tftp2::REQ*
Arena::CreateMaybeMessage< ::tftp2::REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::DATA*
Arena::CreateMaybeMessage< ::tftp2::DATA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::ACK*
Arena::CreateMaybeMessage< ::tftp2::ACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::ACK >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::Error*
Arena::CreateMaybeMessage< ::tftp2::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::Path*
Arena::CreateMaybeMessage< ::tftp2::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::ListResponse*
Arena::CreateMaybeMessage< ::tftp2::ListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::ListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::ListItem*
Arena::CreateMaybeMessage< ::tftp2::ListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::ListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::FILE*
Arena::CreateMaybeMessage< ::tftp2::FILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::FILE >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::MOVE*
Arena::CreateMaybeMessage< ::tftp2::MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::Mensagem*
Arena::CreateMaybeMessage< ::tftp2::Mensagem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::Mensagem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
